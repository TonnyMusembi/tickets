// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.assignTicketStmt, err = db.PrepareContext(ctx, assignTicket); err != nil {
		return nil, fmt.Errorf("error preparing query AssignTicket: %w", err)
	}
	if q.createCustomerStmt, err = db.PrepareContext(ctx, createCustomer); err != nil {
		return nil, fmt.Errorf("error preparing query CreateCustomer: %w", err)
	}
	if q.createTicketStmt, err = db.PrepareContext(ctx, createTicket); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTicket: %w", err)
	}
	if q.createTransactionStmt, err = db.PrepareContext(ctx, createTransaction); err != nil {
		return nil, fmt.Errorf("error preparing query CreateTransaction: %w", err)
	}
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getTicketStmt, err = db.PrepareContext(ctx, getTicket); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicket: %w", err)
	}
	if q.getTicketByTitleAndUserStmt, err = db.PrepareContext(ctx, getTicketByTitleAndUser); err != nil {
		return nil, fmt.Errorf("error preparing query GetTicketByTitleAndUser: %w", err)
	}
	if q.getTransanctionByIDStmt, err = db.PrepareContext(ctx, getTransanctionByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetTransanctionByID: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByEmailExcludingIDStmt, err = db.PrepareContext(ctx, getUserByEmailExcludingID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmailExcludingID: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.listTicketsStmt, err = db.PrepareContext(ctx, listTickets); err != nil {
		return nil, fmt.Errorf("error preparing query ListTickets: %w", err)
	}
	if q.listTransactionsStmt, err = db.PrepareContext(ctx, listTransactions); err != nil {
		return nil, fmt.Errorf("error preparing query ListTransactions: %w", err)
	}
	if q.listUsersStmt, err = db.PrepareContext(ctx, listUsers); err != nil {
		return nil, fmt.Errorf("error preparing query ListUsers: %w", err)
	}
	if q.updateTicketStatusStmt, err = db.PrepareContext(ctx, updateTicketStatus); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTicketStatus: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.assignTicketStmt != nil {
		if cerr := q.assignTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing assignTicketStmt: %w", cerr)
		}
	}
	if q.createCustomerStmt != nil {
		if cerr := q.createCustomerStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createCustomerStmt: %w", cerr)
		}
	}
	if q.createTicketStmt != nil {
		if cerr := q.createTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTicketStmt: %w", cerr)
		}
	}
	if q.createTransactionStmt != nil {
		if cerr := q.createTransactionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createTransactionStmt: %w", cerr)
		}
	}
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getTicketStmt != nil {
		if cerr := q.getTicketStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketStmt: %w", cerr)
		}
	}
	if q.getTicketByTitleAndUserStmt != nil {
		if cerr := q.getTicketByTitleAndUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTicketByTitleAndUserStmt: %w", cerr)
		}
	}
	if q.getTransanctionByIDStmt != nil {
		if cerr := q.getTransanctionByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTransanctionByIDStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByEmailExcludingIDStmt != nil {
		if cerr := q.getUserByEmailExcludingIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailExcludingIDStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.listTicketsStmt != nil {
		if cerr := q.listTicketsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTicketsStmt: %w", cerr)
		}
	}
	if q.listTransactionsStmt != nil {
		if cerr := q.listTransactionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listTransactionsStmt: %w", cerr)
		}
	}
	if q.listUsersStmt != nil {
		if cerr := q.listUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listUsersStmt: %w", cerr)
		}
	}
	if q.updateTicketStatusStmt != nil {
		if cerr := q.updateTicketStatusStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTicketStatusStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	assignTicketStmt              *sql.Stmt
	createCustomerStmt            *sql.Stmt
	createTicketStmt              *sql.Stmt
	createTransactionStmt         *sql.Stmt
	createUserStmt                *sql.Stmt
	getTicketStmt                 *sql.Stmt
	getTicketByTitleAndUserStmt   *sql.Stmt
	getTransanctionByIDStmt       *sql.Stmt
	getUserByEmailStmt            *sql.Stmt
	getUserByEmailExcludingIDStmt *sql.Stmt
	getUserByIDStmt               *sql.Stmt
	listTicketsStmt               *sql.Stmt
	listTransactionsStmt          *sql.Stmt
	listUsersStmt                 *sql.Stmt
	updateTicketStatusStmt        *sql.Stmt
	updateUserStmt                *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		assignTicketStmt:              q.assignTicketStmt,
		createCustomerStmt:            q.createCustomerStmt,
		createTicketStmt:              q.createTicketStmt,
		createTransactionStmt:         q.createTransactionStmt,
		createUserStmt:                q.createUserStmt,
		getTicketStmt:                 q.getTicketStmt,
		getTicketByTitleAndUserStmt:   q.getTicketByTitleAndUserStmt,
		getTransanctionByIDStmt:       q.getTransanctionByIDStmt,
		getUserByEmailStmt:            q.getUserByEmailStmt,
		getUserByEmailExcludingIDStmt: q.getUserByEmailExcludingIDStmt,
		getUserByIDStmt:               q.getUserByIDStmt,
		listTicketsStmt:               q.listTicketsStmt,
		listTransactionsStmt:          q.listTransactionsStmt,
		listUsersStmt:                 q.listUsersStmt,
		updateTicketStatusStmt:        q.updateTicketStatusStmt,
		updateUserStmt:                q.updateUserStmt,
	}
}
