// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type UsersRole string

const (
	UsersRoleAdmin    UsersRole = "admin"
	UsersRoleAgent    UsersRole = "agent"
	UsersRoleCustomer UsersRole = "customer"
)

func (e *UsersRole) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UsersRole(s)
	case string:
		*e = UsersRole(s)
	default:
		return fmt.Errorf("unsupported scan type for UsersRole: %T", src)
	}
	return nil
}

type NullUsersRole struct {
	UsersRole UsersRole
	Valid     bool // Valid is true if UsersRole is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUsersRole) Scan(value interface{}) error {
	if value == nil {
		ns.UsersRole, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UsersRole.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUsersRole) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.UsersRole), nil
}

type Ticket struct {
	ID          int64         `db:"id"`
	Title       string        `db:"title"`
	Description string        `db:"description"`
	Status      int16         `db:"status"`
	Priority    string        `db:"priority"`
	CreatedBy   int64         `db:"created_by"`
	AssignedTo  sql.NullInt64 `db:"assigned_to"`
	CreatedAt   time.Time     `db:"created_at"`
	UpdatedAt   time.Time     `db:"updated_at"`
}

type User struct {
	ID        int64         `db:"id"`
	FullName  string        `db:"full_name"`
	Email     string        `db:"email"`
	Password  string        `db:"password"`
	Role      NullUsersRole `db:"role"`
	CreatedAt sql.NullTime  `db:"created_at"`
}
